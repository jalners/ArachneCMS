@model WWW.ViewModels.PageModel
@{
    Model.Meta.Title = "Простота кода - ArachneCMS";
    //TODO:Metas
    Model.Meta.OpenGraph.Add("url", this.Request.Url.ToString());
    Model.Meta.OpenGraph.Add("title", Model.Meta.Title);
    Model.Meta.OpenGraph.Add("image", this.Request.Url + "/dzen.jpg");
    Model.Meta.OpenGraph.Add("description", "Простота кода, пожалуй, одна из самых противоречивых метрик и чаще всего о ней говорят в контексте поспешного, аврального внесения изменений. Когда мы идем на сделки с совестью, принципом DRY и закрываем глаза на то, что расплатой за этот шаг является усложнение сопровождения, дальнейшего развития и многих других аспектов системы.");
}

<div class="page-title">
    <div class="container">
        <h1>Простота кода</h1>
        <ul class="breadcrumb">
            <li><a href="/">В начало</a></li>
            <li><a href="#TODO:/ru/blog">Блог</a></li>
            <li><a href="#TODO:/ru/blog/2014">2014</a></li>
            <li><a href="#TODO:/ru/blog/2014-01">01</a></li>
            <li><a href="#TODO:/ru/blog/2014-01-30">30</a></li>
        </ul>
    </div>
</div>

<div class="container main-content clearfix">
    <img src="/ru/blog/2014-01-30-prostota-koda/dzen.jpg" alt="Сад камней" class="image-right" />

    <p>
        Простота кода, пожалуй, одна из самых противоречивых метрик и чаще всего о ней говорят
        в контексте поспешного, аврального внесения изменений. Когда мы идем на сделки с
        совестью, принципом <a href="#TODO:">DRY</a> и закрываем глаза на то, что расплатой за
        этот шаг является усложнение сопровождения, дальнейшего развития и многих других
        аспектов системы. Назвать такой код простым не поднимается язык. Определение ему &mdash;
        примитивность. Простота сродни формуле E=mc<sup>2</sup> или периодической системе
        химических элементов Менделеева. Она зачастую требует немалых интеллектуальных усилий,
        но платит за них всепроникающим эффектом.
    </p>

    <p>
        Возьмем в качестве примера концепцию <a href="#TODO:">MVC</a>, которая существенно
        упростила разработку веб-приложений. Их стало легче писать, отлаживать, тестировать,
        обеспечивать параллельную работу и разработку. Но ее появление не было сиюсекундным
        решением, прошел не один десяток лет от первых экспериментов в Smalltalk до появления
        Ruby on Rails, Django, ASP.NET MVC и других реализаций этой парадигмы.
    </p>

    <p>
        Или еще один вариант &mdash; автоматизированные тесты. Многие адепты принципа
        <a href="#TODO:">KISS</a> скажут, что можно бы и обойтись без них. Да, юнит-тест
        некоторого метода может занять лишнюю минуту. Но эта &laquo;сложность&raquo; сегодня
        оборачивается спокойствием на следующие сотни и тысячи релизов системы завтра. Вы
        можете безболезненно заниматься рефакторингом.
    </p>

    <blockquote>
        Простота кода &mdash; это мера потерянных в рамках жизненного цикла ПО
        нервных клеток.
        <a class="retweet" href="https://twitter.com/intent/retweet?tweet_id=428473457001504768">ретвит &rarr;</a>
    </blockquote>

    <p>
        Попробуем положить на одну чашу весов простоту сиюминутную, в виде поблажки собственной
        лени, а на другую &mdash; простоту фундаментальную, которая пропитывает весь комплекс
        задач, связанных с кодом. Его становится проще читать, понимать, отлаживать, изменять,
        тестировать, сопровождать, масштабировать, развертывать, делиться им с другими. Разве
        уместно один термин использовать в обоих случаях? Фактически, они являются антиподами.
        Если их рассмотреть как мерило затраченных на всем цикле разработки нервных клеток, то
        первая &mdash; с большим знаком минус, тогда как вторая &mdash; плюс.
    </p>

    <p>
        И в этом контексте хотелось бы поразмышлять над несколькими техниками, нацеленными на
        упрощение.
    </p>

    <a id="udachnye-praktiki" title="Удачные практики"></a>
    <h2>Используйте удачные практики</h2>
    <p>
        Есть большое количество удачных практик разработки. Принципы <a href="#TODO:">SOLID</a>,
        <a href="#TODO:">DRY</a>, паттерны проектирования и многие другие. Их использование уже
        дает некоторые гарантии качества, упрощает многие процессы и облегчает понимание,
        поскольку использует известный многим коллегам понятийный аппарат. Они, безусловно, не
        являются серебряной пулей, но вполне могут помочь в качестве стартовой точки опоры.
    </p>

    <a id="avtomatizatsiya-processov" title="Автоматизация процессов"></a>
    <h2>Автоматизация производственных процессов</h2>
    <p>
        Автоматизация большинства инструментальных процессов, начиная от
        <a href="#TODO:">функциональных тестов</a> и до более глобальных вроде
        <a href="#TODO:">continuous delivery</a> существенно упростит вопросы
        эволюционирования системы. Начиная от рефакторинга и заканчивая доставкой новых версий
        конечным потребителям. Не стоит пренебрегать возможностью делегировать компьютеру
        некоторые задачи, чем заниматься ими самому.
    </p>

    <a id="razdelyai-i-vlastvui" title="Разделяй и властвуй"></a>
    <h2>Разделяй и властвуй</h2>
    <p>
        Этот принцип в том или ином виде проявляется во многих дисциплинах. Например,
        тайм-менеджеры советуют &laquo;разрезать слона на бифштексы&raquo;, чтобы его съесть. Так
        и в нашем случае, непосильные задачи или сложные участки кода стоит разделить на парочку
        более простых. И так продолжать декомпозицию дальше, пока не придет решение.
    </p>
</div>
